#!/usr/env/python3
#-*- encoding: UTF-8 -*-

__version__ = "0.1"

import sqlite3
import time
import os

from aiogram import Bot, Dispatcher, executor, types
from hashlib import md5




# here is your token
TOKEN = ""
# save user's information?
ANONYMOUS = False
# database name
DB_NAME = "db_ideas.sqlite3"
# enter username without '@'
SUPER_USERS = []

content = {
  "Astart" : "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç—É—Ç –∏–≥—Ä–∞—é —Ä–æ–ª—å —Å–µ–∫—Ä–µ—Ç–∞—Ä—è –∏ –∑–∞–ø–∏—Å—ã–≤–∞—é –≤—Å–µ –≤–∞—à–∏ –∏–¥–µ–∏ —Å–µ–±–µ –≤ –±–ª–æ–∫–Ω–æ—Ç–∏–∫. –ù–∞–ø–∏–∏—à–∏ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ —Å–≤–æ–µ–º—É —Ö–æ–∑—è–∏–Ω—É.",
  "start"  : "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç—É—Ç –∏–≥—Ä–∞—é —Ä–æ–ª—å —Å–µ–∫—Ä–µ—Ç–∞—Ä—è –∏ –∑–∞–ø–∏—Å—ã–≤–∞—é –≤—Å–µ –≤–∞—à–∏ –∏–¥–µ–∏ —Å–µ–±–µ –≤ –±–ª–æ–∫–Ω–æ—Ç–∏–∫. –ù–∞–ø–∏–∏—à–∏ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ —Å–≤–æ–µ–º—É —Ö–æ–∑—è–∏–Ω—É.\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ - 5 —Å–æ–æ–±—â–µ–Ω–∏–π",
  "help"   : "–í–æ—Ç –∫—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –≤—Å–µ–º—É:\n‚≠ïÔ∏è /start - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n‚≠ïÔ∏è /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n‚≠ïÔ∏è /show - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n‚≠ïÔ∏è /export - —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ txt-—Ñ–∞–π–ª\n‚≠ïÔ∏è /clear - –æ—á–∏—Å—Ç–∏—Ç—å –ë–î\n‚≠ïÔ∏è /remove - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–∑ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏\n‚≠ïÔ∏è *–ü—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ* - –∑–∞–∫–∏–Ω—É—Ç—å –≤ –ë–î"
}

# if token wasn't entered
if not TOKEN:
    print("[-] –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω!")
    exit()

if ANONYMOUS:
    print("[?] –ë–æ—Ç –Ω–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö!")

print('[?] –ò–º—è –ë–î: "%s"' % DB_NAME)

# creates the bot
bot = Bot(TOKEN)
# gets bot's decorator
dp = Dispatcher(bot)

# if it's first start -> create the database and tables
if not os.path.exists(DB_NAME):
    db = sqlite3.connect(DB_NAME)
    db.execute("""
    CREATE TABLE `ideas`(
        user_id   VARCHAR(255) NOT NULL,
        username  VARCHAR(32)  NOT NULL,
        firstname VARCHAR(255) NOT NULL,
        text      TEXT         NOT NULL,
        date      VARCHAR(128) NOT NULL
    )
    """)
    db.execute("""
    CREATE TABLE `count`(
        user_id  VARCHAR(255) NOT NULL,
        count    INTEGER NOT NULL,
        timeleft INTEGER NOT NULL
    )
    """)
    db.commit()
    db.close()
    print("[+] Database has created successfully! <3")


@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    if ANONYMOUS:
        await message.answer(content["Astart"])
    else:
        await message.answer(content["start"])


@dp.message_handler(commands=["help"])
async def help(message: types.Message):
    if message.from_user.username in SUPER_USERS:
        await message.answer(content["help"])


@dp.message_handler(commands=["show"])
async def show_all_ideas(message: types.Message):
    if message.from_user.username in SUPER_USERS:
        db = sqlite3.connect(DB_NAME)

        all_ideas = db.execute("SELECT * FROM `ideas`").fetchall()

        db.close()

        output_message = "ID / USERNAME / FIRSTNAME / DATE\n"

        if all_ideas:
            for idea in all_ideas:
                output_message += " / ".join(idea) + "\n"
            await message.answer(output_message)
        else:
            await message.answer("–£–ø—Å! –ï—â—ë –Ω–µ—Ç—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π!")


@dp.message_handler(commands=["export"])
async def export_into(message: types.Message):
    if message.from_user.username in SUPER_USERS:
        db = sqlite3.connect(DB_NAME)
        all_data = db.execute("SELECT * FROM `ideas`").fetchall()
        db.close()
        if all_data:
            filename = "export%d.txt" % int(time.time())
            with open(filename, "w") as export_file:
                for data in all_data:
                    if data[1] != "N/A":
                        data = list(data)
                        data[1] = "@" + data[1]

                    export_file.write(" / ".join(data)+"\n")

            await message.answer(f"[+] –ë–î —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ {filename}")
        else:
            await message.answer("[-] –ë–î –ø—É—Å—Ç–∞! –≠–∫—Å–ø–æ—Ä—Ç –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω!")


@dp.message_handler(commands=["clear"])
async def clear_database(message: types.Message):
    if message.from_user.username in SUPER_USERS:
        db = sqlite3.connect(DB_NAME)
        db.execute("DELETE FROM `ideas`")
        db.commit()
        db.close()
        await message.answer("[+] –ë–î —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!")


@dp.message_handler(commands=["remove"])
async def remove_exports(message: types.Message):
    if message.from_user.username in SUPER_USERS:
        deleted_files = 0
        for file in os.listdir():
            if file.startswith("export") and file.endswith(".txt"):
                os.remove(file)
                deleted_files += 1

        if not deleted_files:
            await message.answer("[-] –ù–µ—Ç—É —Ñ–∞–π–ª–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")
        else:
            await message.answer("[+] –í—Å–µ —Ñ–∞–π–ª—ã —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—á–∏—â–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")


@dp.message_handler(content_types=["text"])
async def get_message(message: types.Message):
    if message.chat.type == "private":
        # check message on length and bad symbols
        if len(message.text) < 10:
            await message.answer("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ!")
            return
        elif "#" in message.text or "--" in message.text:
            await message.answer("–í –≤–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã! (#, --)")
            return
        elif message.text.count(" ") < 5:
            await message.answer("–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ –≤ –≤–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ :(")
            return

        user = message.from_user
        db = sqlite3.connect(DB_NAME)
        # do not save info about user if ANONYMOUS
        if ANONYMOUS:
            # no info
            user_id, username, firstname   = "N/A", "N/A", "N/A"
        else:
            # info
            user_id   = user.id
            username  = user.username
            firstname = user.first_name
                        # if aldready inserted

            user_countinfo = list(db.execute(f"SELECT * FROM `count` WHERE user_id={user_id}").fetchone())

            if user_countinfo:
                if user_countinfo[2] < int(time.time()):
                    if user_countinfo[1] == 5:
                        await message.answer("–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å!")
                        db.close()
                        return
                    elif user_countinfo[1]+1 == 5:
                        # –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ª-–≤–æ 5 –∏ –≤—Ä–µ–º—è
                        timeleft = int(time.time()) + 3600*12
                        db.execute(f"UPDATE `count` SET count=5, timeleft={timeleft} WHERE user_id={user_countinfo[0]}")
                    else:
                        # –ø—Ä–æ—Å—Ç–æ —É–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª-–≤–æ
                        user_countinfo[1] += 1
                        db.execute(f"UPDATE `count` SET count={user_countinfo[1]} WHERE user_id={user_countinfo[0]}")
                else:
                    await message.answer("–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å!")
                    db.close()
                    return
            else:
                db.execute("INSERT INTO `count` (user_id, count, timeleft) VALUES (?,?,?)",(user_id, 1, 0))

        text      = message.text
        date      = time.asctime( time.localtime(time.time()) )

        db.execute("""
        INSERT INTO `ideas` (user_id, username, firstname, text, date)
        VALUES (?,?,?,?,?)
        """, (user_id, username, firstname, text, date))

        db.commit()
        db.close()
        # if ANONYMOUS -> another message
        if ANONYMOUS:
            await message.answer("–ú–æ–π —Ö–æ–∑—è–∏–Ω –ø–æ–∑–∞–±–æ—Ç–∏–ª—Å—è –æ –≤–∞—à–µ–π –∫–æ–Ω—Ñ–∏–¥–∏—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ ‚Äî —è —Å–æ—Ö—Ä–∞–Ω—é —Ç–æ–ª—å–∫–æ –≤–∞—à —Ç–µ–∫—Å—Ç –∏ –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏!\n\nüíõ –°–ø–∞—Å–∏–±–æ –≤–∞–º –∑–∞ –≤–∞—à—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!")
        else:
            await message.answer("üíõ –°–ø–∞—Å–∏–±–æ –≤–∞–º –∑–∞ –≤–∞—à—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!")

        print("[+] –ú—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ! =)")

# start bot execution
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
